//
// MIXINS
// ----------------------------------------------------------------------------

// Breakpoints 
// ----------------------------------------------------------------------------
@mixin breakpoint($min: 0, $max: 0) {

  $type: type-of($min);

  @if $type == string {

    $class: $min;

    @if $class == xs {
      @media (max-width: $screen-xs-max) { @content; }
    }
   
    @else if $class == sm {
      @media (min-width: $screen-sm) { @content; }
    }
   
    @else if $class == md {
      @media (min-width: $screen-md) { @content; }
    }
   
    @else if $class == lg {
      @media (min-width: $screen-lg) { @content; }
    }

    @else if $class == xl {
      @media (min-width: $screen-xl) { @content; }
    }
   
    @else {
      @warn "Breakpoint mixin supports: xs, sm, md, lg";
    }

  }
 
  @else if $type == number {

    $query: "all" !default;
    
    @if $min != 0 and $max != 0 { 
      $query: "(min-width: #{$min}) and (max-width: #{$max})"; 
    }
    
    @else if $min != 0 and $max == 0 { 
      $query: "(min-width: #{$min})"; 
    }
    
    @else if $min == 0 and $max != 0 { 
      $query: "(max-width: #{$max})"; 
    }
    
    @media #{$query} { 
      @content;
    }

  }

}

// Hide visually 
// ----------------------------------------------------------------------------
@mixin visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}
.visuallyhidden {
  @include visuallyhidden;
} 

// icon loader
// ----------------------------------------------------------------------------
@mixin icon-loader {
  font-size: 10px;
  display: inline-block;
  position: relative;
  text-indent: -9999em;
  border-top: 3px solid rgba($loading-icon-color, 0.3);
  border-right: 3px solid rgba($loading-icon-color, 0.3);
  border-bottom: 3px solid rgba($loading-icon-color, 0.3);
  border-left: 3px solid $loading-icon-color;
  transform: translateZ(0);
  animation: spin 1.2s infinite linear;

  &,
  &::after {
    border-radius: 50%;
    width: $loading-icon-size;
    height: $loading-icon-size;
  }

  &,
  span {
    display: inline-block;
    vertical-align: bottom;
  }

  & + span {
    margin-left: 6px;
  }

  //Dark icon
  &--dark {
    border-top: 3px solid rgba($loading-icon-color-alt, 0.2);
    border-right: 3px solid rgba($loading-icon-color-alt, 0.2);
    border-bottom: 3px solid rgba($loading-icon-color-alt, 0.2);
    border-left: 3px solid $loading-icon-color-alt;
  }

  //Alt icon
  &--alt {
    border-top: 3px solid rgba($gray-base, 0.2);
    border-right: 3px solid rgba($gray-base, 0.2);
    border-bottom: 3px solid rgba($gray-base, 0.2);
    border-left: 3px solid setColor(blue,base);
  }

  //Large
  &--lg {
    border-width: 15px;
    width: 90px;
    height: 90px;
  }

  //Center
  &--center {
    position: relative;
    top: calc(50% - 45px);
    left: calc(50% - 45px);
  }
}

// Create solid buttons
// ---------------------------------------------------------------------------
@mixin solid-button($color: $btn-main-color, $bg: $btn-main-bg, $color--hover: $btn-main-color, $bg--hover: $btn-main-hover, $color--active: $btn-main-color, $bg--active: $btn-main-active) {

  color: $color;
  background-color: $bg;

  &:hover,
  &:focus,
  &:focus:hover {
    color: $color--hover;
    background-color: $bg--hover;
  }

  &:active {
    color: $color--active;
    background-color: $bg--active;
  }  

}

// Create ghost buttons
// ---------------------------------------------------------------------------
@mixin ghost-button($border-color: setColor(gray,light), $color: setColor(gray,darker), $background-active: setColor(gray,darker), $background-hover: #ECECEC, $active-color: setColor(white, base)){

  background-color: transparent;
  border: 1px solid $border-color;
  color: $color;

  &:hover,
  &:active,
  &:focus {
    color: $active-color;
    background-color: $background-hover;
    border-color: $background-hover;
  }
  
}

// Style placeholders
// ----------------------------------------------------------------------------
@mixin placeholder {
  &::-webkit-input-placeholder {@content};
  &:-moz-placeholder           {@content};
  &::-moz-placeholder          {@content};
  &:-ms-input-placeholder      {@content};
}

// Box elements
// ----------------------------------------------------------------------------
@mixin box($border-color: setColor(gray,light), $background-color: setColor(gray,lighter)) {
  border: 1px solid $border-color;
  background-color: $background-color;
  padding: $padding-box;
}

// Alerts
// ----------------------------------------------------------------------------
@mixin alert($color) {
  background-color: desaturate(lighten($color, 47%), 35%);
  color: $color;
  border-radius: $border-radius;

  .alert__msg,
  .icon {
    color: $color;
    vertical-align: middle;
  }
}

// Function to set title taked from Title MAP. Must to indicate title-key. Color is optional 
// -----------------------------------------------------------------------------------------
@mixin title($c-title-key, $color: setColor(gray, darker), $c-font: $main-font) {
  @each $title-key, $title-value in $title-props {
      @if $c-title-key == $title-key {
          font-family: $main-font;
          line-height: 1.5;
          @if ($c-font) {
            font-family: $c-font;
          } @else {
            font-family: $alt-font;
          }
          @if $c-title-key != price { color : $color; }
          @if $c-title-key == price { color : setColor(red,dark); }
          @each $prop-key, $prop-value in $title-value {
              @if $prop-key == weight { font-weight: $prop-value; }
              @if $prop-key == desktop { font-size: $prop-value; }
              @if $prop-key == mobile { 
                  @include breakpoint(xs) {
                      font-size: $prop-value;
                  }
              }
          }
      }
  }
}

// Function to set text taked from text MAP. Must to indicate title-key. Color & link-hover-color is optional 
// ----------------------------------------------------------------------------------------------------------
@mixin text($c-text-key, $c-color: setColor(gray,darker), $link-on-hover: false) {
  @each $text-key, $text-value in $text-props {
      @if $c-text-key == $text-key {
          font-family: $alt-font; 
          @each $prop-key, $prop-value in $text-value {
              @if $prop-key == weight { font-weight: $prop-value; }
              @if $prop-key == size { font-size: $prop-value; }
              @if $prop-key == letter-spacing { letter-spacing: $prop-value; }
              @if $prop-key == mobile { @include breakpoint(xs) { font-size: $prop-value; } }
          }
          @if $c-text-key != link { color : $c-color; }
          @if $c-text-key == link { 
              color : setColor(blue, base);
              text-decoration: none; 
              &:hover { text-decoration: underline;}
              &:active,
              &:focus { text-decoration: none;}    
          }
          // @if $c-text-key == small_soft {
          //   color: setColor(gray,darkest);
          // }
          @if $link-on-hover == true {
              text-decoration: none; 
              &:hover {
                  color: setColor(blue, base);
                  text-decoration: underline;
              } 
          }
      }
  }
}
//CREATE EACH CLASS FOR TITLE
@each $title-key, $title-value in $title-props {
  .title_#{$title-key}{
      @include title(#{$title-key});
  }
}
//CREATE EACH CLASS FOR TEXT
@each $text-key, $text-value in $text-props {
  .text_#{$text-key}{
      @include text(#{$text-key});
  }
}


// Create classes for colorize elements
// -----------------------------------------------------------------------------------------
@each $color-key, $color-value in $colors {
    @each $tone-key, $tone-value in $color-value {
      @if $tone-key == base {
        .color-#{$color-key} { color: $tone-value; }
        .bg-color-#{$color-key} { background-color: $tone-value; }
      } @else {
        .color-#{$color-key}-#{$tone-key} { color: $tone-value; }
        .bg-color-#{$color-key}-#{$tone-key} { background-color: $tone-value; }
      }
    }
} 
