//
// FUNCTIONS
// ----------------------------------------------------------------------------

// EM calculator
// ----------------------------------------------------------------------------
@function em($pixels, $context: $main-font-size) {
    @return #{$pixels / $context}em;
  }
  
// Create a randonNumber within a range
// ----------------------------------------------------------------------------
@function randomNumber($min, $max) {
    @return ceil((random() * $max) - $min) + $min;
}

// Function to enter two levels MAP format
// ----------------------------------------------------------------------------
@function map-fetch($map, $keys) {
    $key: nth($keys, 1);
    $length: length($keys);
    $value: map-get($map, $key);
    @if ($length > 1) {
      $rest: ();
      @for $i from 2 through $length {
        $rest: append($rest, nth($keys, $i));
      }
      @return map-fetch($value, $rest);
    } 
    @else {
      @return $value;
    }
}
  
// Function to set color taked from Color MAP. Must to indicate Color and Tone
// ----------------------------------------------------------------------------
@function setColor($color, $tone: 'base') {
    $palette : $colors;
    @return map-fetch($palette, $color $tone);
}

/**
 * Convert font-size from px to rem with px fallback
 *
 * @param $size - the value in pixel you want to convert
 *
 * e.g. p {@include fontSize(12px);}
 * 
 */

@function calculateRem($size) {
  $remSize: ($size / 16px) * 1rem;
//Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize};
}

$spaceamounts: (5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 75, 100); // Adjust this to include the pixel amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone

@each $space in $spaceamounts {
  @each $side in $sides {
    .m-#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: #{$space}px !important;
    }
  
    .p-#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: #{$space}px !important;
    }
  }
}